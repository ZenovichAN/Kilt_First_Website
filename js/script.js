'use strict';//чтобы весь код был в строгом режиме




/** ВАЛИДАЦИЯ ФОРМ */

// валидация формы бывает двух типов:
// 1. валидация на стороне клиента (в браузере) 
// 2. валидация на стороне сервера (на сервере)
// валидация на стороне клиента выполняется с помощью JavaScript и HTML атрибутов
// валидация на стороне сервера выполняется с помощью PHP и SQL запросов
// валидация на стороне клиента выполняется перед отправкой формы на сервер

/** КЛИЕНТ-СЕРВЕРНОЕ ВЗАИМОДЕЙСТВИЕ */

//fetch это функция, которая позволяет отправлять запросы на сервер и получать ответы от него
//fetch(url, options) - url - адрес на который отправляется запрос, options - объект с настройками запроса


//rest api - это архитектурный стиль взаимодействия между клиентом и сервером, который позволяет обмениваться данными в формате JSON

//api это набор функций и протоколов, которые позволяют взаимодействовать с программным обеспечением, операционной системой или другим сервисом

//rest api - это интерфейс, который позволяет взаимодействовать с сервером через HTTP запросы (GET, POST, PUT, DELETE) и получать ответы в формате JSON
//rest api - это способ взаимодействия между клиентом и сервером, который позволяет обмениваться данными в формате JSON

//для практики можно использовать free rest api, например: https://jsonplaceholder.typicode.com/
//или https://reqres.in/

//или https://api.github.com/users
//или https://api.github.com/users/octocat

fetch('http://localhost:3000/posts')
      .then(response => response.json())
      .then(json => console.log(json))

//npm i json-server команда в терминале для установки json-server
//json-server --watch db.json команда в терминале для запуска json-server


//npx json-server db.json5 для запуска json-server
// после представятся несколько url адресов

// весь код урока  https://github.com/aleksanderlamkov/js-course

// ссылка на npm  https://www.npmjs.com/package/json-server


/** БРАУЗЕРНЫЕ ХРАНИЛИЩА ДАННЫХ */


//localStorage - это браузерное хранилище данных, которое позволяет хранить данные в браузере на стороне клиента
//localStorage - это объект, который позволяет хранить данные в браузере в виде пар ключ-значение
//localStorage - это хранилище данных, которое позволяет хранить данные в браузере на стороне клиента

//sessionStorage - это браузерное хранилище данных, которое позволяет хранить данные в браузере на стороне клиента
//sessionStorage - это объект, который позволяет хранить данные в браузере в виде пар ключ-значение


//cookies - это небольшие файлы, которые хранятся на стороне клиента и содержат информацию о пользователе

//indexedDB - это браузерное хранилище данных, которое позволяет хранить данные в браузере на стороне клиента
//indexedDB - это объект, который позволяет хранить данные в браузере в виде пар ключ-значение



/** LOCATION, HISTORY API, URL СТРАНИЦЫ И ИСТОРИЯ БРАУЗЕРА */

// setTimeout(() => {
//     window.location.assign('./index.html') //перенаправление на другую страницу
//     }
     
// , 5000) //через 5 секунды

// setTimeout(() => {
//     window.location.assign('./link-of-product.html') //перенаправление на другую страницу
// }
// , 5000) //через 5 секунды


// setTimeout(() => {
//     window.location.assign('./index.html') //перенаправление на другую страницу
//     console.log('Перенаправление на другую страницу')}
// , 5000) //через 5 секунды


//window.history.back() //возврат на предыдущую страницу
//window.history.forward() //возврат на следующую страницу
//window.history.go(-1) //возврат на предыдущую страницу
//window.history.go(1) //возврат на следующую страницу
//window.history.go(0) //перезагрузка страницы
//window.history.go(-2) //возврат на 2 страницы назад
//window.history.go(2) //возврат на 2 страницы вперед
//window.history.go(-3) //возврат на 3 страницы назад


